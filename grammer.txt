##Description
c stand for value
name stand for name
place stand for temporary variable

##Grammer
<prog> -- program <id>； M <block>

M -- ep
{t = mkable(nil);
push(t, tblpter);
push(0, offset);}

N -- ep
{t = mkable(top(tblptr));
push(t, tblpter);
push(0, offset);}

<block> -- [<condecl>][<vardecl>][<proc>]<body>

<condecl> -- const <const>{,<const>};

<const> -- <id>:=<integer>
{enter(id.name, integer, offset);
p = lookup(id.name);
emit(p = <exp>.place);
offset = offset+4;}

<vardecl> -- var A;
{for id in A.idlist enter ( id.name , integer , offset );
			offset = offset+4;}

<proc> -- procedure <id> N（C）;<block>{;<proc>}
{t = top(tblptr);
addwidth(t, top(offset));
pop(tblptr);
pop(offset);
enterproc(top(tblptr), id.name, t);}

<body> -- begin <statement> H L end
{backpatch(<statemnt>.nextlist , H.quad);}

L -- ; <statement> H
{backpatch(<statemnt>.nextlist , H.quad);}

L -- ep
{}

<statement> -- <id> := <exp>
{p = lookup(id.name);
if p != nil then emit(p = <exp>.place)
else error}

<statement> -- if <lexp> then H <statement>
{backpatch(<lexp>.truelist, H.quad);
<statement>.nextlist = merge(<lexp>.falselist, <statement1>.nextlist);}

<statement> -- if <lexp> then H <statement> I else H <statement>
{backpatch(<lexp>.truelist, H.quad);
backpatch(<lexp>.falselist, H1.quad);
<statement>.nextlist = merge(<statement1>.nextlist, <statement2>.nextlist, I.nextlist);}

H -- ep
{H.quad = nextquad;}

I --ep
{N.nextlist = makelist(nextquad);
emit(j - - -);}

<statement> -- while H <lexp> do H <statement>
{backpatch(<statement1>.nextlist, H1.quad) ;
backpatch(<lexp>.truelist, H2.quad)
<stament>.nextlist = <lexp>.falselist
emit(‘j , - , - , H1.quad’)}

<statement> -- call <id>（F)
{for p in F.placelist emit(param p);
call id.name;}

<statement> -- <body>
<statement> -- read (A)
<statement> -- write (<exp>{,<exp>})

<lexp> -- <exp> <lop> <exp>
{<lexp>.place = newtemp;
emit(<lexp>.place = <exp1>.place <lop>.c <exp2>.place)}

<lexp> -- odd <exp>
{<lexp>.place = newtemp;
emit(<lexp>.place = not <exp>.place)}

<exp> -- -<term>D
{<exp>.place = newtemp;
emit(<exp>.place = -<term>.place + D.place)}

<exp> -- +<term>D
{<exp>.place = newtemp;
emit(<exp>.place = <term>.place + D.place)}

<term> -- <factor>E
{term.place = newtemp;
if E.mop = * then emit(<term>.place = <factor>.place * E.place)
else emit(<term>.place = <factor>.place / E.place)}

<factor> -- <id>
{p = lookup(id.name);
<factor>.place = p;}

<factor> -- <integer>
{<factor>.place = <integer>.c}

<factor> -- (<exp>)
{<factor>.place = <exp>.place}

<lop> -- =
{<lop>.c = =}

<lop> -- <>
{<lop>.c = <>}

<lop> -- <
{<lop>.c = <}

<lop> -- <=
{<lop>.c = <=}

<lop> -- >
{<lop>.c = >}

<lop> -- >=
{<lop>.c = >=}

<aop> -- +
{<aop>.c = +}

<aop> -- -
{<aop>.c = -}

qqqq<mop> -- *
{<mop>.c = *;}

<mop> -- /
{<mop>.c = /;}

<id> -- l{l|d}
{id.name = l{l|d};}

<integer> -- d{d}
{<integer>.c = d{d};}

A -- <id>B
{A.idlist = B.idlist + id.name;}

B -- ,<id>B
{B.idlist = B1.idlist + id.name;}

B -- ep
{B.idlist = nil;}

C -- A
{C.idlist = A.idlist;}

C -- ep
{C.idlist = nil;}

D -- <aop><term>D
{D.place = newtemp;
if <aop>.c = + then emit(D.place = <term>.place + D1.place)
else emit(D.place = <term>.place + D1.place)}

D -- ep
{D.place = 0;}

E -- <mop><factor>E
{E.mop = mop.c;
E.place = newtemp;
if E1.mop = * then emit(E.place = factor.place * E1.place)
else E1.mop = / then emit(E.place = factor.place / E1.place)}

E -- ep
{E.c = 1;
E.mop = *;}

F -- ep
{F.placelist = nil;}

F -- <exp>G
{F.placelist = G.placelist + <exp>;}

G -- ep
{G.placelist = nil;}

G -- ,<exp>G
{G.placelist = G1.placelist + <exp>;}
